name: Security Scan

on:
  push:
    branches: [main, develop, stage]
  pull_request:
    branches: [main, develop, stage]
  schedule:
    # Run weekly security scans
    - cron: "0 2 * * 1"

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety semgrep

      - name: Run Bandit (SAST)
        run: |
          bandit -r src/ -f json -o bandit-report.json || true
          bandit -r src/ -f txt

      - name: Run Safety (Dependency Vulnerability Check)
        run: |
          safety check --json --output safety-report.json || true
          safety check

      - name: Run Semgrep (Additional SAST)
        run: |
          semgrep --config=auto src/ --json --output=semgrep-report.json || true
          semgrep --config=auto src/

      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            semgrep-report.json

      - name: Comment PR with Security Summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let comment = '## üîí Security Scan Results\n\n';

            try {
              // Bandit results
              const banditData = JSON.parse(fs.readFileSync('bandit-report.json', 'utf8'));
              const banditIssues = banditData.results?.length || 0;
              comment += `**Bandit (SAST):** ${banditIssues} issues found\n`;

              // Safety results
              const safetyData = JSON.parse(fs.readFileSync('safety-report.json', 'utf8'));
              const safetyVulns = safetyData.vulnerabilities?.length || 0;
              comment += `**Safety (Dependencies):** ${safetyVulns} vulnerabilities found\n`;

              // Semgrep results
              const semgrepData = JSON.parse(fs.readFileSync('semgrep-report.json', 'utf8'));
              const semgrepFindings = semgrepData.results?.length || 0;
              comment += `**Semgrep (SAST):** ${semgrepFindings} findings\n`;

              if (banditIssues > 0 || safetyVulns > 0 || semgrepFindings > 0) {
                comment += '\n‚ö†Ô∏è Security issues detected. Please review the artifacts for details.';
              } else {
                comment += '\n‚úÖ No security issues detected.';
              }

            } catch (error) {
              comment += '\n‚ùå Error reading security scan results.';
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  secrets-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --only-verified # Only report verified secrets, ignore unverified ones
